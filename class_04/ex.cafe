-- 組み込みモジュール TRIV をエラー型も扱えるよう拡張する
-- TRIV は組み込みなので pr は不要
mod* TRIV-ERR {
  [Elt Err < Elt&Err]
  op err : -> Err .
}

-- Parameterized Modules
-- パラメータEは組み込みモジュール TRIV に制約を受ける
-- Elt.E が最低でも1つの型に対応付けれらている必要がある
mod! GLIST1(E :: TRIV) {
  [Nil NnList < List]
  op nil : -> Nil { constr } .
  op _|_ : Elt.E List -> NnList { constr } .
  op _@_ : List List -> List .
  var X : Elt.E .
  vars L L2 : List .
  eq nil @ L2 = L2 .
  eq (X | L) @ L2 =  X | (L @ L2) .
}

-- Generic Lists with Error Handling
-- このモジュールの引数 E はTRIV-ERRの制約を満たしている型により汎用化されている
mod! GLIST2(E :: TRIV-ERR) {
  [Nil NnList < List]
  op nil : -> Nil {constr} .
  op _|_ : Elt.E List -> NnList {constr} .
  op hd : Nil -> Err.E .
  op hd : NnList -> Elt.E .
  op hd : List -> Elt&Err.E .
  op tl : List -> List .
  op _@_ : List List -> List .
  var X : Elt.E .
  vars L L2 : List .
  eq hd(nil) = err.E .
  eq hd(X | L) = X .
  eq tl(nil) = nil .
  eq tl(X | L) = L .
  eq nil @ L2 = L2 .
  eq (X | L) @ L2 = X | (L @ L2) .
}

mod! NAT-ERR {
  pr(NAT)
  [Nat ErrNat < Nat&Err]
  op errNat : -> ErrNat {constr} .
  op p_ : Zero -> ErrNat .
  op p_ : ErrNat -> ErrNat .
  op p_ : Nat&Err -> Nat&Err .
  op _quo_ : Nat&Err Zero -> ErrNat .
  op _quo_ : Nat&Err ErrNat -> ErrNat .
  op _quo_ : ErrNat Nat&Err -> ErrNat .
  op _quo_ : Nat&Err Nat&Err -> Nat&Err .
  var NE : Nat&Err .
  eq p 0 = errNat .
  eq p errNat = errNat .
  eq NE quo 0 = errNat .
  eq NE quo errNat = errNat .
  eq errNat quo NE = errNat .
}

-- Parameterized Modules はインスタンス化される際、
-- 型 (sort) が必ず置き換えられなければならない
-- また、型以外にも必要であれば operator の置き換えを求めることもある
-- viewはその置き換え方法を指定する記法である
-- ここでは TRIV-ERR の型および operator を定義して、
-- 他の parameterized modules に指定できるようにしている
-- 制約を定めた型はFPM、インスタンス化する先の型はAPMと呼ばれる
view TRIV-ERR2NAT-ERR from TRIV-ERR to NAT-ERR {
  sort Elt -> Nat,
  sort Err -> ErrNat,
  sort Elt&Err -> Nat&Err,
  op err -> errNat,
}

-- インスタンス化する型を指定する場合は「E <= view 名」という書式で指定する
mod! NATLIST7 {
  pr(GLIST2(E <= TRIV-ERR2NAT-ERR) * {
    sort List -> NatList,
    sort Nil -> NLNil,
    sort NnList -> NnNatList,
    op nil -> nlnil
  })
}

mod! GLIST-ERR(E :: TRIV-ERR) {
  [Nil NnList < List]
  [List ErrList < List&Err]
  op nil : -> Nil {constr} .
  op _|_ : Elt.E List -> List {constr} .
  op errList : -> ErrList {constr} .
  op _|_ : Elt&Err.E List&Err -> List&Err .
  op hd : Nil -> Err.E .
  op hd : NnList -> Elt.E .
  op hd : ErrList -> Err.E .
  op hd : List&Err -> Elt&Err .
  op tl : Nil -> ErrList .
  op tl : NnList -> List .
  op tl : ErrList -> ErrList .
  op tl : List&Err -> List&Err .
  op _@_ : List List -> List .
  op _@_ : ErrList List&Err -> ErrList .
  op _@_ : List&Err ErrList -> ErrList .
  op _@_ : ErrList List&Err -> List&Err .
  op if_then{_}else{_}
    : Bool List&Err List&Err -> List&Err .
}

-- エラーも扱える
mod! NATLIST8 {
  pr(GLIST-ERR(E <= TRIV-ERR2NAT-ERR)
  * {sort List -> NatList,
  sort Nil -> NLNil,
  sort NnList -> NnNatList,
  sort ErrList -> ErrNatList,
  sort List&Err -> NatList&Err,
  op nil -> nlnil,
  op errList -> errNatList } )
}

view TRIV-ERR2NATLIST8 from TRIV-ERR to NATLIST8 {
  sort Elt -> NatList,
  sort Err -> ErrNatList,
  sort Elt&Err -> NatList&Err,
  op err -> errNatList,
}

-- NATLISTを要素に持つLIST
-- viewの指定時にはsortやoperatorを変名できる
mod! NATLISTLIST1 {
  pr(GLIST-ERR(E <= TRIV-ERR2NATLIST8)
  * {sort List -> NatListList,
  sort Nil -> NLLNil,
  sort NnList -> NnNatListList,
  sort ErrList -> ErrNatListList,
  sort List&Err -> NatListList&Err,
  op nil -> nllnil,
  op errList -> errNatListList } )
}

mod* TRIV-ERR-ORD {
  [Elt Err < Elt&Err]
  op err : -> Err .
  op ord : Elt Elt -> Bool .
}

-- 制約は err, ord のオペレータが指定されていること
mod! GQSORT(E  ::  TRIV-ERR-ORD) {
  -- imports
  pr(GLIST-ERR(E))
  -- signature
  op qsort : List -> List .
  op partition : Elt.E List List List -> List .
  -- CafeOBJ vars
  vars X Y : Elt.E .
  vars L LL RL : List .
  -- qsort
  eq qsort(nil) = nil .
  eq qsort(X | nil) = X | nil .
  eq qsort(X | Y | L) = partition(X,Y | L,nil,nil) .
  -- partition
  eq partition(X,nil,LL,RL) = qsort(LL) @ (X | qsort(RL)) .
  eq partition(X,Y | L,LL,RL)
    = if ord.E(Y,X) then {partition(X,L,Y | LL,RL)}
      else {partition(X,L,LL,Y | RL)} .
}

-- 制約は GQSORT と同じ
mod! GMSORT(E :: TRIV-ERR-ORD) {
  -- imports
  pr(GLIST-ERR(E))
  -- signature
  op msort : List -> List .
  op merge : List List -> List .
  -- CafeOBJ vars
  vars X Y : Elt.E .
  vars L LL RL : List .
  -- equations
  -- sort
  eq msort(nil) = nil .
  eq msort(X | nil) = X | nil .
  eq msort(X | L) = merge(msort(X | nil), msort(L)) .
  -- merge
  eq merge(LL, nil) = msort(LL) .
  eq merge(nil, RL) = msort(RL) .
  eq merge(X | LL, Y | RL)
    = if ord.E(X, Y)
      then { X | merge(LL, Y | RL) }
      else { Y | merge(X | LL, RL) } .
}

-- TRIV-ERR-ORD を NAT-ERR で置き換えてインスタンス化するときに用いるビュー
view TRIV-ERR-ORD2NAT-ERR from TRIV-ERR-ORD to NAT-ERR {
  sort Elt -> Nat,
  sort Err -> ErrNat,
  sort Elt&Err -> Nat&Err,
  op err -> errNat,
  op ord -> _<_,
}

mod! STRING-ERR {
  pr(STRING)
  [String ErrString < String&Err]
  op errStr : -> ErrString {constr} .
}

-- TRIV-ERR-ORD を NAT-ERR で置き換えてインスタンス化するときに用いるビュー
view TRIV-ERR-ORD2STRING-ERR from TRIV-ERR-ORD to STRING-ERR {
  sort Elt -> String,
  sort Err -> ErrString,
  sort Elt&Err -> String&Err,
  op err -> errStr,
  op ord -> string<,
}

-- ordオペレータが定義されている
mod! GLIST-ERR-ORD(E :: TRIV-ERR-ORD) {
  [Nil NnList < List]
  [List ErrList < List&Err]
  op nil : -> Nil {constr} .
  op _|_ : Elt.E List -> List {constr} .
  op errList : -> ErrList {constr} .
  op _|_ : Elt&Err.E List&Err -> List&Err .
  op hd : Nil -> Err.E .
  op hd : NnList -> Elt.E .
  op hd : ErrList -> Err.E .
  op hd : List&Err -> Elt&Err .
  op tl : Nil -> ErrList .
  op tl : NnList -> List .
  op tl : ErrList -> ErrList .
  op tl : List&Err -> List&Err .
  op ord : List List -> Bool .
  op _@_ : List List -> List .
  op _@_ : ErrList List&Err -> ErrList .
  op _@_ : List&Err ErrList -> ErrList .
  op _@_ : ErrList List&Err -> List&Err .
  op if_then{_}else{_}
    : Bool List&Err List&Err -> List&Err .
  vars X Y : Elt.E .
  vars L L2 : List .
  eq ord(nil, nil) = false .
  eq ord(nil, Y | L2) = true .
  eq ord(X | L, nil) = false .
  eq ord(X | L, Y | L2) = ord(X, Y) or ((not ord(Y, X)) and ord(L, L2)) .
}

-- NATでインスタンス化する (ord, err 制約を満たしている)
mod! NATLIST9 {
  pr(GLIST-ERR-ORD(E <= TRIV-ERR-ORD2NAT-ERR)
  * {sort List -> NatList,
    sort Nil -> NLNil,
    sort NnList -> NnNatList,
    sort ErrList -> ErrNatList,
    sort List&Err -> NatList&Err,
    op nil -> nlnil,
    op errList -> errNatList } )
}

view TRIV-ERR-ORD2NATLIST9 from TRIV-ERR-ORD to NATLIST9 {
  sort Elt -> NatList,
  sort Err -> ErrNatList,
  sort Elt&Err -> NatList&Err,
  op err -> errNatList,
  op ord -> ord,
}

-- STRINGでインスタンス化する (ord, err 制約を満たしている)
mod! STRLIST1 {
  pr(GLIST-ERR-ORD(E <= TRIV-ERR-ORD2STRING-ERR)
  * {sort List -> StrList,
    sort Nil -> SLNil,
    sort NnList -> NnStrList,
    sort ErrList -> ErrStrList,
    sort List&Err -> StrList&Err,
    op nil -> slnil,
    op errList -> errStrList } )
}

view TRIV-ERR-ORD2STRLIST1 from TRIV-ERR-ORD to STRLIST1 {
  sort Elt -> StrList,
  sort Err -> ErrStrList,
  sort Elt&Err -> StrList&Err,
  op err -> errStrList,
  op ord -> ord,
}

--

--  open NATLIST7 .
--    red hd(nlnil) .
--    red hd((4 | 3 | nlnil) @ (2 | 1 | 0 | nlnil)) .
--    red tl(nlnil) .
--    red tl((4 | 3 | nlnil) @ (2 | 1 | 0 | nlnil)) .
--  close
--
--  open NATLIST8 .
--    red hd(nlnil) .
--    red hd((4 | 3 | nlnil) @ (2 | 1 | 0 | nlnil)) .
--    red tl(nlnil) .
--    red tl((4 | 3 | nlnil) @ (2 | 1 | 0 | nlnil)) .
--  close
--
--  open NATLISTLIST1 .
--    red hd(nllnil) .
--    red hd((4 | 3 | nlnil) | (2 | 1 | 0 | nlnil) | nllnil) .
--    red tl(nlnil) .
--    red tl((4 | 3 | nlnil) | (2 | 1 | 0 | nlnil) | nllnil) .
--  close
--
--  open GQSORT(E <= TRIV-ERR-ORD2NAT-ERR) .
--    red qsort(4 | 7 | 5 | 1 | 0 | 3 | 6 | 2 | nil) .
--  close
--
--  open GQSORT(E <= TRIV-ERR-ORD2STRING-ERR) .
--    red qsort("Lisp" | "Python" | "Pascal" | "CafeOBJ" | "C" |
--    "Java" | "Prolog" | "Fortran" | nil) .
--  close
--
--  open GQSORT(E <= TRIV-ERR-ORD2NATLIST9) .
--    red qsort((1 | 2 | nlnil) | (3 | 0 | 2 | nlnil) | (2 | nlnil) |
--      (0 | nlnil) | nlnil | (1 | 1 | nlnil) | (3 | 0 | 1 | nlnil) |
--      (1 | 0 | nlnil) | nil) .
--  close
--
--  open GQSORT(E <= TRIV-ERR-ORD2STRLIST1) .
--    red qsort(("CafeOBJ" | "Fortran" | slnil) |
--    ("Java" | "C" | "Fortran" | slnil) | ("Fortran" | slnil) |
--    ("C" | slnil) | slnil | ("CafeOBJ" | "CafeOBJ" | slnil) |
--    ("Java" | "C" | "CafeOBJ" | slnil) | ("CafeOBJ" | "C" | slnil) | nil) .
--  close

-- open
-- 制約は GQSORT と同様なので E に取らせる view は流用できる

-- NAT
open GMSORT(E <= TRIV-ERR-ORD2NAT-ERR) .
  red msort(4 | 7 | 5 | 1 | 0 | 3 | 6 | 2 | nil) .
close

-- STRING
open GMSORT(E <= TRIV-ERR-ORD2STRING-ERR) .
  red msort("Lisp" | "Python" | "Pascal" | "CafeOBJ" | "C" |
  "Java" | "Prolog" | "Fortran" | nil) .
close

-- NATのリスト
open GMSORT(E <= TRIV-ERR-ORD2NATLIST9) .
  red msort((1 | 2 | nlnil) | (3 | 0 | 2 | nlnil) | (2 | nlnil) |
    (0 | nlnil) | nlnil | (1 | 1 | nlnil) | (3 | 0 | 1 | nlnil) |
    (1 | 0 | nlnil) | nil) .
close

-- STRINGのリスト
open GMSORT(E <= TRIV-ERR-ORD2STRLIST1) .
  red msort(("CafeOBJ" | "Fortran" | slnil) |
  ("Java" | "C" | "Fortran" | slnil) | ("Fortran" | slnil) |
  ("C" | slnil) | slnil | ("CafeOBJ" | "CafeOBJ" | slnil) |
  ("Java" | "C" | "CafeOBJ" | slnil) | ("CafeOBJ" | "C" | slnil) | nil) .
close
